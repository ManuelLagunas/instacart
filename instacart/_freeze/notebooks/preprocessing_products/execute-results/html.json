{
  "hash": "c63dfacd0e3c6a12c8a4e217e9a499a0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Preprocessing Products \"\nformat: \n    html:\n        toc: true\n        toc-depth: 4\n---\n\n:::{#25945319 .cell .markdown}\n# Libraries\n:::\n\n::: {#949b94fe .cell execution_count=1}\n``` {}\n#  ---------- libraries ---------\nimport pandas as pd\n```\n:::\n\n\n:::{#74f369df .cell .markdown}\n# Read Data\n:::\n\n::: {#acb19242 .cell execution_count=2}\n``` {}\n# ---------- read data ----------\ndf = pd.read_csv('datasets/products_raw.csv', sep=';')\ndf_aisles = pd.read_csv('datasets/aisles_raw.csv', sep=';')\ndf_departments = pd.read_csv('datasets/departments_raw.csv', sep=';')\n```\n:::\n\n\n:::{#14e30857 .cell .markdown}\n# Preprocessing\n\n## Data type\n:::\n\n::: {#b07a110f .cell execution_count=3}\n``` {}\n# data type ----------\ndf = df.astype('str')\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 49694 entries, 0 to 49693\nData columns (total 4 columns):\n #   Column         Non-Null Count  Dtype \n---  ------         --------------  ----- \n 0   product_id     49694 non-null  object\n 1   product_name   49694 non-null  object\n 2   aisle_id       49694 non-null  object\n 3   department_id  49694 non-null  object\ndtypes: object(4)\nmemory usage: 1.5+ MB\n```\n:::\n:::\n\n\n:::{#fa38930c .cell .markdown}\n## Duplicated data\n:::\n\n::: {#e699562d .cell execution_count=4}\n``` {}\n# duplicated data ----------\ndf[df.duplicated()]\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>product_id</th>\n      <th>product_name</th>\n      <th>aisle_id</th>\n      <th>department_id</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#3f94ff21 .cell execution_count=5}\n``` {}\nprint('El numero de valores duplicados es:',df.duplicated().sum())\nprint()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEl numero de valores duplicados es: 0\n\n```\n:::\n:::\n\n\n::: {#5be405cf .cell execution_count=6}\n``` {}\n# Duplicated data products names\ndf['product_name']=df['product_name'].str.lower()\nprint('El numero de nombres duplicados es:', df['product_name'].duplicated().sum())\nprint()\nprint('Los valores duplicados son:')\nprint()\nduplicated_product_names = df['product_name'][df['product_name'].duplicated()].value_counts().to_frame().reset_index()\nduplicated_product_names.columns = ['product_name', 'count']\nduplicated_product_names\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEl numero de nombres duplicados es: 1361\n\nLos valores duplicados son:\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>product_name</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>nan</td>\n      <td>1257</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>green tea with ginseng and honey</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>carrot and celery sticks</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ibuprofen tablets 200 mg</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>blanc de noirs</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>muenster cheese slices</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>potatoes o'brien with onions and peppers</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>101</th>\n      <td>beef chili with beans</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>102</th>\n      <td>candy bar</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>103</th>\n      <td>burrito- steak &amp; cheese</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>104 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n:::{#358bfafc .cell .markdown}\n**Conclusión** Los datos demuestran que existen nombres duplicados, que considero no  opresentan mayor problema ya que tienen diferentes product_id, lo que persivo es que la mayoria de valores duplicados son valores Nan por lo que se debe decidir que hacer con estos\n\n## Missing data\n**Hipotesis** Los valores ausentes en la columna product_name estan relacionados con el pasillo con id 100 y con el departamento con id 21\n:::\n\n::: {#fdbf7dd5 .cell execution_count=7}\n``` {}\n# Aislar los datos nulos\ndf_nan_product_name = df[df['product_name'] == 'nan']\ndf_nan_product_name\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>product_id</th>\n      <th>product_name</th>\n      <th>aisle_id</th>\n      <th>department_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>37</th>\n      <td>38</td>\n      <td>nan</td>\n      <td>100</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>71</th>\n      <td>72</td>\n      <td>nan</td>\n      <td>100</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>110</td>\n      <td>nan</td>\n      <td>100</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>296</th>\n      <td>297</td>\n      <td>nan</td>\n      <td>100</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>417</td>\n      <td>nan</td>\n      <td>100</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>49552</th>\n      <td>49553</td>\n      <td>nan</td>\n      <td>100</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>49574</th>\n      <td>49575</td>\n      <td>nan</td>\n      <td>100</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>49640</th>\n      <td>49641</td>\n      <td>nan</td>\n      <td>100</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>49663</th>\n      <td>49664</td>\n      <td>nan</td>\n      <td>100</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>49668</th>\n      <td>49669</td>\n      <td>nan</td>\n      <td>100</td>\n      <td>21</td>\n    </tr>\n  </tbody>\n</table>\n<p>1258 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#9443d3f4 .cell execution_count=8}\n``` {}\n# Son todos los valores de aisle_id 100?\nall_aisle_id_100 = (df_nan_product_name['aisle_id'] == '100').all()\nprint('¿Son todos los valores de la columna aisle_id 100?',all_aisle_id_100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n¿Son todos los valores de la columna aisle_id 100? True\n```\n:::\n:::\n\n\n::: {#b60601d0 .cell execution_count=9}\n``` {}\n# Son todos los valores de department_id 21?\nall_department_id_21 = (df_nan_product_name['department_id'] == '21').all()\nprint('¿Son todos los valores de la columna department_id 21?',all_department_id_21)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n¿Son todos los valores de la columna department_id 21? True\n```\n:::\n:::\n\n\n:::{#e3483363 .cell .markdown}\n**Conclusión** Los valores ausentes corresponden todos a el pasillo 100 y el departamento 21 Por lo que se tiene que hacer un estudio en los demas dataframes para tratar de descubrir a que se refieren estos vaslores\n\n### Missing data study \n:::\n\n::: {#eced4c76 .cell execution_count=10}\n``` {}\n# Busqueda de que departamento corresponde\nprint(df_departments.loc[20,'department'])\nprint(df_aisles.loc[99,'aisle'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmissing\nmissing\n```\n:::\n:::\n\n\n:::{#75ad3655 .cell .markdown}\n**Conclusión** Los valores arrojados por el estudio son missing, por lo que serán imputados en los valores ausentes.\n:::\n\n::: {#2decb413 .cell execution_count=11}\n``` {}\n# \ndf['product_name']=df['product_name'].fillna('missing')\nprint('el numero de valores ausentes del dataframe es:\\n',df.isnull().sum())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nel numero de valores ausentes del dataframe es:\n product_id       0\nproduct_name     0\naisle_id         0\ndepartment_id    0\ndtype: int64\n```\n:::\n:::\n\n\n:::{#df677d08 .cell .markdown}\n# Save data\n:::\n\n::: {#6870e5e7 .cell execution_count=12}\n``` {}\n# ---------- save data ----------\ndf.to_csv('datasets/clean_products.csv', index=False)\n```\n:::\n\n\n",
    "supporting": [
      "preprocessing_products_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}